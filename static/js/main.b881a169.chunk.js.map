{"version":3,"sources":["logo.svg","AddToHomeScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddToHomeScreen","props","deferredPrompt","state","show","window","addEventListener","e","preventDefault","console","log","setState","this","prompt","userChoice","then","choiceResult","outcome","onClick","handleAddClick","bind","Component","App","className","src","logo","alt","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,yMCkE5BC,E,kDA/Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,eAAiB,KACtB,EAAKC,MAAQ,CACXC,MAAM,GAJS,E,gEAQE,IAAD,OAClBC,OAAOC,iBAAiB,uBAAuB,SAAAC,GAE7CA,EAAEC,iBAGF,EAAKN,eAAiBK,EAEtBE,QAAQC,IAAI,oDACZ,EAAKC,SAAS,CAACP,MAAM,S,uCAKP,IAAD,OAGXQ,KAAKV,gBACPU,KAAKD,SAAS,CAACP,MAAM,IAGrBQ,KAAKV,eAAeW,SAIpBD,KAAKV,eAAeY,WAAWC,MAAK,SAAAC,GACL,aAAzBA,EAAaC,QACfR,QAAQC,IAAI,iCAEZD,QAAQC,IAAI,kCAId,EAAKR,eAAiB,SAGxBO,QAAQC,IAAI,2B,+BAMd,OADeE,KAAKT,MAAbC,MAEPK,QAAQC,IAAI,eAGV,6BACE,4BAAQQ,QAASN,KAAKO,eAAeC,KAAKR,OAA1C,wBALc,S,GAnDQS,a,MCiBfC,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,yBAIF,kBAAC,EAAD,QCFAC,EAAcC,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTlB,MAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBrC,QACfgC,UAAUC,cAAcO,YAI1BlC,QAAQC,IACN,iHAKEwB,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB7B,QAAQC,IAAI,sCAGRwB,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BQ,OAAM,SAAAC,GACLtC,QAAQsC,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,aAAwBjD,OAAOwB,SAAS0B,MACpDC,SAAWnD,OAAOwB,SAAS2B,OAIvC,OAGFnD,OAAOC,iBAAiB,QAAQ,WAC9B,IAAM2B,EAAK,UAAMqB,aAAN,sBAEP3B,IAgEV,SAAiCM,EAAOC,GAEtCuB,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5B3C,MAAK,SAAA4C,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMjD,MAAK,SAAAuB,GACjCA,EAAa2B,aAAalD,MAAK,WAC7BV,OAAOwB,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1BY,OAAM,WACLrC,QAAQC,IACN,oEAvFAyD,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMjD,MAAK,WACjCN,QAAQC,IACN,iHAMJsB,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.b881a169.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\n\nclass AddToHomeScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.deferredPrompt = null;\n    this.state = {\n      show: false\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener('beforeinstallprompt', e => {\n      // Prevent Chrome 67 and earlier from automatically showing the prompt\n      e.preventDefault();\n      // Stash the event so it can be triggered later.\n      // @ts-ignore\n      this.deferredPrompt = e;\n      // Show button\n      console.log('beforeinstallprompt triggered... show add button');\n      this.setState({show: true});\n    });\n  }\n\n  // bind to this\n  handleAddClick() {\n    // @ts-ignore\n\n    if (this.deferredPrompt) {\n      this.setState({show: false});\n      // Show the prompt\n      // @ts-ignore\n      this.deferredPrompt.prompt();\n      // Wait for the user to respond to the prompt\n      // @ts-ignore\n    \n      this.deferredPrompt.userChoice.then(choiceResult => {\n        if (choiceResult.outcome === 'accepted') {\n          console.log('User accepted the A2HS prompt');\n        } else {\n          console.log('User dismissed the A2HS prompt');\n        }\n        // @ts-ignore\n    \n        this.deferredPrompt = null;\n      });\n    } else {\n      console.log('Invalid prompt object');\n    }\n  }\n\n  render() {\n    const {show} = this.state;\n    if (!show) return null;\n    console.log('AICI AJUnge');\n\n    return (\n      <div>\n        <button onClick={this.handleAddClick.bind(this)}>\n          Add to home screen\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default AddToHomeScreen;\n","import React from 'react';\nimport logo from './logo.svg';\nimport AddToHomeScreen from './AddToHomeScreen'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n      </header>\n      <AddToHomeScreen />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}